// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Zopoesht.Persistence.Contexts;

#nullable disable

namespace Zopoesht.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241105112009_add-fields-to-app-two")]
    partial class addfieldstoapptwo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Zopoesht.Data.AdministrativeExpenses.AnnualAdministrativeExpenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<int>("AuthorityId")
                        .HasColumnType("integer")
                        .HasColumnName("authorityid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("integer")
                        .HasColumnName("creatoruserid");

                    b.Property<int>("PeriodId")
                        .HasColumnType("integer")
                        .HasColumnName("periodid");

                    b.Property<int>("RootId")
                        .HasColumnType("integer")
                        .HasColumnName("rootid");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityId");

                    b.HasIndex("PeriodId");

                    b.ToTable("annualadministrativeexpenses");
                });

            modelBuilder.Entity("Zopoesht.Data.AdministrativeExpenses.AnnualAdministrativeExpensesHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnnualAdministrativeExpenseId")
                        .HasColumnType("integer")
                        .HasColumnName("annualadministrativeexpenseid");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificationdate");

                    b.Property<int>("RootId")
                        .HasColumnType("integer")
                        .HasColumnName("rootid");

                    b.Property<string>("UserFullName")
                        .HasColumnType("text")
                        .HasColumnName("userfullname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("AnnualAdministrativeExpenseId");

                    b.HasIndex("UserId");

                    b.ToTable("annualadministrativeexpenseshistory");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.Applicant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicantType")
                        .HasColumnType("integer")
                        .HasColumnName("applicanttype");

                    b.Property<int?>("AuthorityId")
                        .HasColumnType("integer")
                        .HasColumnName("authorityid");

                    b.Property<int?>("IndividualId")
                        .HasColumnType("integer")
                        .HasColumnName("individualid");

                    b.Property<int?>("LegalEntityId")
                        .HasColumnType("integer")
                        .HasColumnName("legalentityid");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("integer")
                        .HasColumnName("operatorid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityId");

                    b.HasIndex("IndividualId");

                    b.HasIndex("LegalEntityId");

                    b.HasIndex("OperatorId");

                    b.ToTable("applicant");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOne", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicantId")
                        .HasColumnType("integer")
                        .HasColumnName("applicantid");

                    b.Property<int?>("ApplicationOneDamageId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationonedamageid");

                    b.Property<int?>("ApplicationOneLegalEntityId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationonelegalentityid");

                    b.Property<int?>("ApplicationOneThreatId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationonethreatid");

                    b.Property<int>("ApplicationOneType")
                        .HasColumnType("integer")
                        .HasColumnName("applicationonetype");

                    b.Property<string>("ChangeStateDescription")
                        .HasColumnType("text")
                        .HasColumnName("changestatedescription");

                    b.Property<int>("CommitState")
                        .HasColumnType("integer")
                        .HasColumnName("commitstate");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("integer")
                        .HasColumnName("creatoruserid");

                    b.Property<string>("RegisterNumber")
                        .HasColumnType("text")
                        .HasColumnName("registernumber");

                    b.Property<int>("RootId")
                        .HasColumnType("integer")
                        .HasColumnName("rootid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("ApplicationOneDamageId");

                    b.HasIndex("ApplicationOneLegalEntityId");

                    b.HasIndex("ApplicationOneThreatId");

                    b.ToTable("applicationone");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneActivityOffering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityOfferingId")
                        .HasColumnType("integer")
                        .HasColumnName("activityofferingid");

                    b.Property<int>("ApplicationOneBasicId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationonebasicid");

                    b.HasKey("Id");

                    b.HasIndex("ActivityOfferingId");

                    b.HasIndex("ApplicationOneBasicId");

                    b.ToTable("applicationoneactivityoffering");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneAffectedCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationOneBasicId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationonebasicid");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("countryid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationOneBasicId");

                    b.HasIndex("CountryId");

                    b.ToTable("applicationoneaffectedcountry");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneAuthority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationOneId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationoneid");

                    b.Property<int>("AuthorityId")
                        .HasColumnType("integer")
                        .HasColumnName("authorityid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationOneId");

                    b.HasIndex("AuthorityId");

                    b.ToTable("applicationoneauthority");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneBasic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text")
                        .HasColumnName("additionalinformation");

                    b.Property<int>("ApplicationOneId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationoneid");

                    b.Property<int?>("CulpritCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("culpritcountryid");

                    b.Property<bool>("HasInternationalElement")
                        .HasColumnType("boolean")
                        .HasColumnName("hasinternationalelement");

                    b.Property<bool>("HasSoilDamage")
                        .HasColumnType("boolean")
                        .HasColumnName("hassoildamage");

                    b.Property<bool>("HasSpeciesDamage")
                        .HasColumnType("boolean")
                        .HasColumnName("hasspeciesdamage");

                    b.Property<bool>("HasWaterDamage")
                        .HasColumnType("boolean")
                        .HasColumnName("haswaterdamage");

                    b.Property<string>("IncomingDocNumber")
                        .HasColumnType("text")
                        .HasColumnName("incomingdocnumber");

                    b.Property<string>("InternationalElementDescription")
                        .HasColumnType("text")
                        .HasColumnName("internationalelementdescription");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OccurenceLocation")
                        .HasColumnType("text")
                        .HasColumnName("occurencelocation");

                    b.Property<string>("OccurenceReasons")
                        .HasColumnType("text")
                        .HasColumnName("occurencereasons");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("integer")
                        .HasColumnName("operatorid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationOneId")
                        .IsUnique();

                    b.HasIndex("CulpritCountryId");

                    b.HasIndex("OperatorId");

                    b.ToTable("applicationonebasic");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneDamage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("MeasuresTaken")
                        .HasColumnType("text")
                        .HasColumnName("measurestaken");

                    b.Property<string>("OccurenceConsequences")
                        .HasColumnType("text")
                        .HasColumnName("occurenceconsequences");

                    b.HasKey("Id");

                    b.ToTable("applicationonedamage");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationOneId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationoneid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("ZopoeshtAttachedFileId")
                        .HasColumnType("integer")
                        .HasColumnName("zopoeshtattachedfileid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationOneId");

                    b.HasIndex("ZopoeshtAttachedFileId");

                    b.ToTable("applicationonefile");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneLegalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("AllegedOccurenceConsequences")
                        .HasColumnType("text")
                        .HasColumnName("allegedoccurenceconsequences");

                    b.Property<string>("ApplicantViolations")
                        .HasColumnType("text")
                        .HasColumnName("applicantviolations");

                    b.Property<string>("RecoveryAdvice")
                        .HasColumnType("text")
                        .HasColumnName("recoveryadvice");

                    b.HasKey("Id");

                    b.ToTable("applicationonelegalentity");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneTerritorialRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationOneBasicId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationonebasicid");

                    b.Property<int>("AuthorityId")
                        .HasColumnType("integer")
                        .HasColumnName("authorityid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationOneBasicId");

                    b.HasIndex("AuthorityId");

                    b.ToTable("applicationoneterritorialrange");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneThreat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnalyticProtocols")
                        .HasColumnType("text")
                        .HasColumnName("analyticprotocols");

                    b.Property<string>("FinancialStatement")
                        .HasColumnType("text")
                        .HasColumnName("financialstatement");

                    b.Property<string>("MeasuresAdvice")
                        .HasColumnType("text")
                        .HasColumnName("measuresadvice");

                    b.Property<string>("PreventiveMeasuresTaken")
                        .HasColumnType("text")
                        .HasColumnName("preventivemeasurestaken");

                    b.HasKey("Id");

                    b.ToTable("applicationonethreat");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.Individual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middlename");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("individual");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.LegalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("LegalEntityName")
                        .HasColumnType("text")
                        .HasColumnName("legalentityname");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("UIN")
                        .HasColumnType("text")
                        .HasColumnName("uin");

                    b.HasKey("Id");

                    b.ToTable("legalentity");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionsTaken")
                        .HasColumnType("text")
                        .HasColumnName("actionstaken");

                    b.Property<string>("AdditionalExpenseText")
                        .HasColumnType("text")
                        .HasColumnName("additionalexpensetext");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text")
                        .HasColumnName("additionalinformation");

                    b.Property<decimal?>("AdministrativeExpense")
                        .HasColumnType("numeric")
                        .HasColumnName("administrativeexpense");

                    b.Property<int>("ApplicantId")
                        .HasColumnType("integer")
                        .HasColumnName("applicantid");

                    b.Property<int>("ApplicationOneId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationoneid");

                    b.Property<int?>("BankGuaranteeId")
                        .HasColumnType("integer")
                        .HasColumnName("bankguaranteeid");

                    b.Property<int>("CaseStatus")
                        .HasColumnType("integer")
                        .HasColumnName("casestatus");

                    b.Property<string>("ChangeStateDescription")
                        .HasColumnType("text")
                        .HasColumnName("changestatedescription");

                    b.Property<int>("CommitState")
                        .HasColumnType("integer")
                        .HasColumnName("commitstate");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("confirmeddate");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("integer")
                        .HasColumnName("creatoruserid");

                    b.Property<bool>("HasAdministrativeExpense")
                        .HasColumnType("boolean")
                        .HasColumnName("hasadministrativeexpense");

                    b.Property<bool>("HasPreventionProcedureResult")
                        .HasColumnType("boolean")
                        .HasColumnName("haspreventionprocedureresult");

                    b.Property<bool>("HasRemovalProcedureResult")
                        .HasColumnType("boolean")
                        .HasColumnName("hasremovalprocedureresult");

                    b.Property<bool>("HasSoilDamage")
                        .HasColumnType("boolean")
                        .HasColumnName("hassoildamage");

                    b.Property<bool>("HasSpeciesDamage")
                        .HasColumnType("boolean")
                        .HasColumnName("hasspeciesdamage");

                    b.Property<bool>("HasUnreimbursedExpense")
                        .HasColumnType("boolean")
                        .HasColumnName("hasunreimbursedexpense");

                    b.Property<bool>("HasWaterDamage")
                        .HasColumnType("boolean")
                        .HasColumnName("haswaterdamage");

                    b.Property<int?>("InsurancePolicyId")
                        .HasColumnType("integer")
                        .HasColumnName("insurancepolicyid");

                    b.Property<string>("LegalProcedureResult")
                        .HasColumnType("text")
                        .HasColumnName("legalprocedureresult");

                    b.Property<int?>("MortgageId")
                        .HasColumnType("integer")
                        .HasColumnName("mortgageid");

                    b.Property<DateTime?>("OccurrenceDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("occurrencedate");

                    b.Property<string>("OccurrenceDateDescription")
                        .HasColumnType("text")
                        .HasColumnName("occurrencedatedescription");

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer")
                        .HasColumnName("operatorid");

                    b.Property<string>("OtherPaymentSource")
                        .HasColumnType("text")
                        .HasColumnName("otherpaymentsource");

                    b.Property<decimal?>("PaidByResponsibleParties")
                        .HasColumnType("numeric")
                        .HasColumnName("paidbyresponsibleparties");

                    b.Property<int>("PaymentSource")
                        .HasColumnType("integer")
                        .HasColumnName("paymentsource");

                    b.Property<DateTime?>("PreventionOrRemovalProcedureFinishDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("preventionorremovalprocedurefinishdate");

                    b.Property<string>("PreventionOrRemovalProcedureFinishInformation")
                        .HasColumnType("text")
                        .HasColumnName("preventionorremovalprocedurefinishinformation");

                    b.Property<string>("PreventionProcedureResult")
                        .HasColumnType("text")
                        .HasColumnName("preventionprocedureresult");

                    b.Property<DateTime?>("ProcedureInitiatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("procedureinitiateddate");

                    b.Property<string>("ProcedureInitiatedDateDescription")
                        .HasColumnType("text")
                        .HasColumnName("procedureinitiateddatedescription");

                    b.Property<string>("ProceedingInfo")
                        .HasColumnType("text")
                        .HasColumnName("proceedinginfo");

                    b.Property<bool>("ProceedingInfoAbsence")
                        .HasColumnType("boolean")
                        .HasColumnName("proceedinginfoabsence");

                    b.Property<int?>("ProceedingType")
                        .HasColumnType("integer")
                        .HasColumnName("proceedingtype");

                    b.Property<decimal?>("RecoveredSubsequentlyByResponsibleParties")
                        .HasColumnType("numeric")
                        .HasColumnName("recoveredsubsequentlybyresponsibleparties");

                    b.Property<string>("RemovalProcedureResult")
                        .HasColumnType("text")
                        .HasColumnName("removalprocedureresult");

                    b.Property<int>("RootId")
                        .HasColumnType("integer")
                        .HasColumnName("rootid");

                    b.Property<int?>("StakeId")
                        .HasColumnType("integer")
                        .HasColumnName("stakeid");

                    b.Property<string>("UnreimbursedExpense")
                        .HasColumnType("text")
                        .HasColumnName("unreimbursedexpense");

                    b.Property<decimal?>("UnreimbursedExpenseValue")
                        .HasColumnType("numeric")
                        .HasColumnName("unreimbursedexpensevalue");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("ApplicationOneId");

                    b.HasIndex("BankGuaranteeId");

                    b.HasIndex("InsurancePolicyId");

                    b.HasIndex("MortgageId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("StakeId");

                    b.ToTable("applicationtwo");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwoActivityOffering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityOfferingId")
                        .HasColumnType("integer")
                        .HasColumnName("activityofferingid");

                    b.Property<int>("ApplicationTwoId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationtwoid");

                    b.HasKey("Id");

                    b.HasIndex("ActivityOfferingId");

                    b.HasIndex("ApplicationTwoId");

                    b.ToTable("applicationtwoactivityoffering");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwoAdministrativeCourt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdministrativeCourtId")
                        .HasColumnType("integer")
                        .HasColumnName("administrativecourtid");

                    b.Property<int>("ApplicationTwoId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationtwoid");

                    b.HasKey("Id");

                    b.HasIndex("AdministrativeCourtId");

                    b.HasIndex("ApplicationTwoId");

                    b.ToTable("applicationtwoadministrativecourt");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwoAuthority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationTwoId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationtwoid");

                    b.Property<int>("AuthorityId")
                        .HasColumnType("integer")
                        .HasColumnName("authorityid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationTwoId");

                    b.HasIndex("AuthorityId");

                    b.ToTable("applicationtwoauthority");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationTwoId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationtwoid");

                    b.Property<int>("CodeId")
                        .HasColumnType("integer")
                        .HasColumnName("codeid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationTwoId");

                    b.HasIndex("CodeId");

                    b.ToTable("applicationtwocode");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwoFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationTwoId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationtwoid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("ZopoeshtAttachedFileId")
                        .HasColumnType("integer")
                        .HasColumnName("zopoeshtattachedfileid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationTwoId");

                    b.HasIndex("ZopoeshtAttachedFileId");

                    b.ToTable("applicationtwofile");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwoMinistryOfInterior", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationTwoId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationtwoid");

                    b.Property<int>("MinistryOfInteriorId")
                        .HasColumnType("integer")
                        .HasColumnName("ministryofinteriorid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationTwoId");

                    b.HasIndex("MinistryOfInteriorId");

                    b.ToTable("applicationtwoministryofinterior");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwoProsecutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationTwoId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationtwoid");

                    b.Property<int>("ProsecutorId")
                        .HasColumnType("integer")
                        .HasColumnName("prosecutorid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationTwoId");

                    b.HasIndex("ProsecutorId");

                    b.ToTable("applicationtwoprosecutor");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.FinancialAssurance.BankGuarantee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text")
                        .HasColumnName("additionalinformation");

                    b.Property<string>("BankName")
                        .HasColumnType("text")
                        .HasColumnName("bankname");

                    b.Property<DateTime?>("GuaranteeDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("guaranteedate");

                    b.Property<DateTime?>("GuaranteeEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("guaranteeend");

                    b.Property<string>("GuaranteeNumber")
                        .HasColumnType("text")
                        .HasColumnName("guaranteenumber");

                    b.Property<DateTime?>("GuaranteeStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("guaranteestart");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("bankguarantee");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.FinancialAssurance.InsurancePolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text")
                        .HasColumnName("additionalinformation");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text")
                        .HasColumnName("companyname");

                    b.Property<DateTime?>("InsuranceEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insuranceend");

                    b.Property<DateTime?>("InsuranceStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insurancestart");

                    b.Property<DateTime?>("PolicyDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("policydate");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("text")
                        .HasColumnName("policynumber");

                    b.Property<decimal>("ResponsibilityLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("responsibilitylimit");

                    b.HasKey("Id");

                    b.ToTable("insurancepolicy");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.FinancialAssurance.Mortgage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text")
                        .HasColumnName("additionalinformation");

                    b.Property<DateTime?>("MortgageDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("mortgagedate");

                    b.Property<string>("MortgageDescription")
                        .HasColumnType("text")
                        .HasColumnName("mortgagedescription");

                    b.Property<string>("MortgageNumber")
                        .HasColumnType("text")
                        .HasColumnName("mortgagenumber");

                    b.Property<int>("MortgageType")
                        .HasColumnType("integer")
                        .HasColumnName("mortgagetype");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("mortgage");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.FinancialAssurance.Stake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text")
                        .HasColumnName("additionalinformation");

                    b.Property<DateTime?>("StakeDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("stakedate");

                    b.Property<string>("StakeDescription")
                        .HasColumnType("text")
                        .HasColumnName("stakedescription");

                    b.Property<string>("StakeNumber")
                        .HasColumnType("text")
                        .HasColumnName("stakenumber");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("stake");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.Common.Models.ApplicationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationid");

                    b.Property<int>("ApplicationType")
                        .HasColumnType("integer")
                        .HasColumnName("applicationtype");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificationdate");

                    b.Property<int>("RootId")
                        .HasColumnType("integer")
                        .HasColumnName("rootid");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("UserFullName")
                        .HasColumnType("text")
                        .HasColumnName("userfullname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.ToTable("applicationhistory");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.Common.Models.ApplicationLock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationid");

                    b.Property<int>("ApplicationType")
                        .HasColumnType("integer")
                        .HasColumnName("applicationtype");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("islocked");

                    b.Property<DateTime?>("LockedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("lockeddate");

                    b.Property<DateTime?>("UnlockedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("unlockeddate");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("applicationlock");
                });

            modelBuilder.Entity("Zopoesht.Data.Common.Models.ZopoeshtAttachedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("zopoeshtattachedfile");
                });

            modelBuilder.Entity("Zopoesht.Data.Emails.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("typeid");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("email");
                });

            modelBuilder.Entity("Zopoesht.Data.Emails.EmailAddressee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<int>("AddresseeType")
                        .HasColumnType("integer")
                        .HasColumnName("addresseetype");

                    b.Property<int>("AttemptsCounter")
                        .HasColumnType("integer")
                        .HasColumnName("attemptscounter");

                    b.Property<int>("EmailId")
                        .HasColumnType("integer")
                        .HasColumnName("emailid");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sentdate");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.ToTable("emailaddressee");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.ActType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("acttype");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("activity");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.AffectedType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("affectedtype");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Authority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<int>("AuthorityType")
                        .HasColumnType("integer")
                        .HasColumnName("authoritytype");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("authority");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Code", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("code");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("nameen");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("country");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Emails.EmailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("emailtype");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.ExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("expensetype");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("group");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Insurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("insurance");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.MeasureType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("measuretype");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Operators.ActivityOffering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("integer")
                        .HasColumnName("activityid");

                    b.Property<int?>("AuthorityBasinId")
                        .HasColumnType("integer")
                        .HasColumnName("authoritybasinid");

                    b.Property<int?>("AuthorityRiosvId")
                        .HasColumnType("integer")
                        .HasColumnName("authorityriosvid");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("integer")
                        .HasColumnName("operatorid");

                    b.Property<int?>("SubActivityId")
                        .HasColumnType("integer")
                        .HasColumnName("subactivityid");

                    b.Property<int?>("TerrainId")
                        .HasColumnType("integer")
                        .HasColumnName("terrainid");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("AuthorityBasinId");

                    b.HasIndex("AuthorityRiosvId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("SubActivityId");

                    b.HasIndex("TerrainId");

                    b.ToTable("activityoffering");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Operators.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("LegalEntityName")
                        .HasColumnType("text")
                        .HasColumnName("legalentityname");

                    b.Property<string>("LegalEntityUic")
                        .HasColumnType("text")
                        .HasColumnName("legalentityuic");

                    b.Property<string>("ManagementAddress")
                        .HasColumnType("text")
                        .HasColumnName("managementaddress");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middlename");

                    b.Property<int?>("MigrationId")
                        .HasColumnType("integer")
                        .HasColumnName("migrationid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("OperatorCorrespondenceId")
                        .HasColumnType("integer")
                        .HasColumnName("operatorcorrespondenceid");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text")
                        .HasColumnName("postalcode");

                    b.Property<int?>("SettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("settlementid");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("OperatorCorrespondenceId");

                    b.HasIndex("SettlementId");

                    b.ToTable("operator");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Operators.OperatorCorrespondence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactPerson")
                        .HasColumnType("text")
                        .HasColumnName("contactperson");

                    b.Property<string>("CorrespondenceAddress")
                        .HasColumnType("text")
                        .HasColumnName("correspondenceaddress");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Fax")
                        .HasColumnType("text")
                        .HasColumnName("fax");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text")
                        .HasColumnName("postalcode");

                    b.Property<int?>("SettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("settlementid");

                    b.HasKey("Id");

                    b.HasIndex("SettlementId");

                    b.ToTable("operatorcorrespondence");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Operators.Terrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("districtid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int?>("MunicipalityId")
                        .HasColumnType("integer")
                        .HasColumnName("municipalityid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer")
                        .HasColumnName("operatorid");

                    b.Property<int?>("SettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("settlementid");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("SettlementId");

                    b.ToTable("terrain");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Period", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<int>("EndYearId")
                        .HasColumnType("integer")
                        .HasColumnName("endyearid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("StartYearId")
                        .HasColumnType("integer")
                        .HasColumnName("startyearid");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("EndYearId");

                    b.HasIndex("StartYearId");

                    b.ToTable("period");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("section");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("sector");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Settlements.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Code2")
                        .HasColumnType("text")
                        .HasColumnName("code2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("MainSettlementCode")
                        .HasColumnType("text")
                        .HasColumnName("mainsettlementcode");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<string>("SecondLevelRegionCode")
                        .HasColumnType("text")
                        .HasColumnName("secondlevelregioncode");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("district");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Settlements.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Code2")
                        .HasColumnType("text")
                        .HasColumnName("code2");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("districtid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("MainSettlementCode")
                        .HasColumnType("text")
                        .HasColumnName("mainsettlementcode");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("municipality");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Settlements.Settlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Altitude")
                        .HasColumnType("text")
                        .HasColumnName("altitude");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("DistrictCode")
                        .HasColumnType("text")
                        .HasColumnName("districtcode");

                    b.Property<string>("DistrictCode2")
                        .HasColumnType("text")
                        .HasColumnName("districtcode2");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("districtid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDistrict")
                        .HasColumnType("boolean")
                        .HasColumnName("isdistrict");

                    b.Property<string>("MayoraltyCode")
                        .HasColumnType("text")
                        .HasColumnName("mayoraltycode");

                    b.Property<string>("MunicipalityCode")
                        .HasColumnType("text")
                        .HasColumnName("municipalitycode");

                    b.Property<string>("MunicipalityCode2")
                        .HasColumnType("text")
                        .HasColumnName("municipalitycode2");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("integer")
                        .HasColumnName("municipalityid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<string>("SettlementName")
                        .HasColumnType("text")
                        .HasColumnName("settlementname");

                    b.Property<string>("TypeCode")
                        .HasColumnType("text")
                        .HasColumnName("typecode");

                    b.Property<string>("TypeName")
                        .HasColumnType("text")
                        .HasColumnName("typename");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("MunicipalityId");

                    b.ToTable("settlement");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.StateAdministration.AdministrativeCourt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdministrativeCourtType")
                        .HasColumnType("integer")
                        .HasColumnName("administrativecourttype");

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("administrativecourt");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.StateAdministration.MinistryOfInterior", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("ministryofinterior");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.StateAdministration.Prosecutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("ProsecutorType")
                        .HasColumnType("integer")
                        .HasColumnName("prosecutortype");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("prosecutor");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.SubActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer")
                        .HasColumnName("activityid");

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("subactivity");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("year");
                });

            modelBuilder.Entity("Zopoesht.Data.Users.PasswordToken", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expirationtime");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("isused");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Value");

                    b.HasIndex("UserId");

                    b.ToTable("passwordtoken");
                });

            modelBuilder.Entity("Zopoesht.Data.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("role");
                });

            modelBuilder.Entity("Zopoesht.Data.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorityId")
                        .HasColumnType("integer")
                        .HasColumnName("authorityid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middlename");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("text")
                        .HasColumnName("passwordsalt");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Position")
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedate");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityId");

                    b.HasIndex("RoleId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Zopoesht.Data.AdministrativeExpenses.AnnualAdministrativeExpenses", b =>
                {
                    b.HasOne("Zopoesht.Data.Nomenclatures.Authority", "Authority")
                        .WithMany()
                        .HasForeignKey("AuthorityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Nomenclatures.Period", "Period")
                        .WithMany("AnnualAdministrativeExpenses")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Authority");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("Zopoesht.Data.AdministrativeExpenses.AnnualAdministrativeExpensesHistory", b =>
                {
                    b.HasOne("Zopoesht.Data.AdministrativeExpenses.AnnualAdministrativeExpenses", "AnnualAdministrativeExpense")
                        .WithMany()
                        .HasForeignKey("AnnualAdministrativeExpenseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnnualAdministrativeExpense");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.Applicant", b =>
                {
                    b.HasOne("Zopoesht.Data.Nomenclatures.Authority", "Authority")
                        .WithMany()
                        .HasForeignKey("AuthorityId");

                    b.HasOne("Zopoesht.Data.Applications.ApplicationOne.Individual", "Individual")
                        .WithMany()
                        .HasForeignKey("IndividualId");

                    b.HasOne("Zopoesht.Data.Applications.ApplicationOne.LegalEntity", "LegalEntity")
                        .WithMany()
                        .HasForeignKey("LegalEntityId");

                    b.HasOne("Zopoesht.Data.Nomenclatures.Operators.Operator", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId");

                    b.Navigation("Authority");

                    b.Navigation("Individual");

                    b.Navigation("LegalEntity");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOne", b =>
                {
                    b.HasOne("Zopoesht.Data.Applications.ApplicationOne.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneDamage", "ApplicationOneDamage")
                        .WithMany()
                        .HasForeignKey("ApplicationOneDamageId");

                    b.HasOne("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneLegalEntity", "ApplicationOneLegalEntity")
                        .WithMany()
                        .HasForeignKey("ApplicationOneLegalEntityId");

                    b.HasOne("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneThreat", "ApplicationOneThreat")
                        .WithMany()
                        .HasForeignKey("ApplicationOneThreatId");

                    b.Navigation("Applicant");

                    b.Navigation("ApplicationOneDamage");

                    b.Navigation("ApplicationOneLegalEntity");

                    b.Navigation("ApplicationOneThreat");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneActivityOffering", b =>
                {
                    b.HasOne("Zopoesht.Data.Nomenclatures.Operators.ActivityOffering", "ActivityOffering")
                        .WithMany()
                        .HasForeignKey("ActivityOfferingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneBasic", "ApplicationOneBasic")
                        .WithMany("ActivityOfferings")
                        .HasForeignKey("ApplicationOneBasicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityOffering");

                    b.Navigation("ApplicationOneBasic");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneAffectedCountry", b =>
                {
                    b.HasOne("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneBasic", "ApplicationOneBasic")
                        .WithMany("AffectedCountries")
                        .HasForeignKey("ApplicationOneBasicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Nomenclatures.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationOneBasic");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneAuthority", b =>
                {
                    b.HasOne("Zopoesht.Data.Applications.ApplicationOne.ApplicationOne", "ApplicationOne")
                        .WithMany("ApplicationOneAuthorities")
                        .HasForeignKey("ApplicationOneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Nomenclatures.Authority", "Authority")
                        .WithMany()
                        .HasForeignKey("AuthorityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationOne");

                    b.Navigation("Authority");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneBasic", b =>
                {
                    b.HasOne("Zopoesht.Data.Applications.ApplicationOne.ApplicationOne", "ApplicationOne")
                        .WithOne("ApplicationOneBasic")
                        .HasForeignKey("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneBasic", "ApplicationOneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Nomenclatures.Country", "CulpritCountry")
                        .WithMany()
                        .HasForeignKey("CulpritCountryId");

                    b.HasOne("Zopoesht.Data.Nomenclatures.Operators.Operator", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId");

                    b.Navigation("ApplicationOne");

                    b.Navigation("CulpritCountry");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneFile", b =>
                {
                    b.HasOne("Zopoesht.Data.Applications.ApplicationOne.ApplicationOne", "ApplicationOne")
                        .WithMany("ApplicationOneFiles")
                        .HasForeignKey("ApplicationOneId");

                    b.HasOne("Zopoesht.Data.Common.Models.ZopoeshtAttachedFile", "ZopoeshtAttachedFile")
                        .WithMany()
                        .HasForeignKey("ZopoeshtAttachedFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationOne");

                    b.Navigation("ZopoeshtAttachedFile");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneTerritorialRange", b =>
                {
                    b.HasOne("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneBasic", "ApplicationOneBasic")
                        .WithMany("TerritorialRanges")
                        .HasForeignKey("ApplicationOneBasicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Nomenclatures.Authority", "Authority")
                        .WithMany()
                        .HasForeignKey("AuthorityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationOneBasic");

                    b.Navigation("Authority");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwo", b =>
                {
                    b.HasOne("Zopoesht.Data.Applications.ApplicationOne.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Applications.ApplicationOne.ApplicationOne", null)
                        .WithMany("ApplicationTwos")
                        .HasForeignKey("ApplicationOneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Applications.ApplicationTwo.FinancialAssurance.BankGuarantee", "BankGuarantee")
                        .WithMany()
                        .HasForeignKey("BankGuaranteeId");

                    b.HasOne("Zopoesht.Data.Applications.ApplicationTwo.FinancialAssurance.InsurancePolicy", "InsurancePolicy")
                        .WithMany()
                        .HasForeignKey("InsurancePolicyId");

                    b.HasOne("Zopoesht.Data.Applications.ApplicationTwo.FinancialAssurance.Mortgage", "Mortgage")
                        .WithMany()
                        .HasForeignKey("MortgageId");

                    b.HasOne("Zopoesht.Data.Nomenclatures.Operators.Operator", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Applications.ApplicationTwo.FinancialAssurance.Stake", "Stake")
                        .WithMany()
                        .HasForeignKey("StakeId");

                    b.Navigation("Applicant");

                    b.Navigation("BankGuarantee");

                    b.Navigation("InsurancePolicy");

                    b.Navigation("Mortgage");

                    b.Navigation("Operator");

                    b.Navigation("Stake");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwoActivityOffering", b =>
                {
                    b.HasOne("Zopoesht.Data.Nomenclatures.Operators.ActivityOffering", "ActivityOffering")
                        .WithMany()
                        .HasForeignKey("ActivityOfferingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwo", "ApplicationTwo")
                        .WithMany("ApplicationTwoActivityOfferings")
                        .HasForeignKey("ApplicationTwoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityOffering");

                    b.Navigation("ApplicationTwo");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwoAdministrativeCourt", b =>
                {
                    b.HasOne("Zopoesht.Data.Nomenclatures.StateAdministration.AdministrativeCourt", "AdministrativeCourt")
                        .WithMany()
                        .HasForeignKey("AdministrativeCourtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwo", "ApplicationTwo")
                        .WithMany("ApplicationTwoAdministrativeCourts")
                        .HasForeignKey("ApplicationTwoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdministrativeCourt");

                    b.Navigation("ApplicationTwo");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwoAuthority", b =>
                {
                    b.HasOne("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwo", "ApplicationTwo")
                        .WithMany("ApplicationTwoAuthorities")
                        .HasForeignKey("ApplicationTwoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Nomenclatures.Authority", "Authority")
                        .WithMany()
                        .HasForeignKey("AuthorityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationTwo");

                    b.Navigation("Authority");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwoCode", b =>
                {
                    b.HasOne("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwo", "ApplicationTwo")
                        .WithMany("Codes")
                        .HasForeignKey("ApplicationTwoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Nomenclatures.Code", "Code")
                        .WithMany()
                        .HasForeignKey("CodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationTwo");

                    b.Navigation("Code");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwoFile", b =>
                {
                    b.HasOne("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwo", "ApplicationTwo")
                        .WithMany("ApplicationTwoFiles")
                        .HasForeignKey("ApplicationTwoId");

                    b.HasOne("Zopoesht.Data.Common.Models.ZopoeshtAttachedFile", "ZopoeshtAttachedFile")
                        .WithMany()
                        .HasForeignKey("ZopoeshtAttachedFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationTwo");

                    b.Navigation("ZopoeshtAttachedFile");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwoMinistryOfInterior", b =>
                {
                    b.HasOne("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwo", "ApplicationTwo")
                        .WithMany("ApplicationTwoMinistryOfInteriors")
                        .HasForeignKey("ApplicationTwoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Nomenclatures.StateAdministration.MinistryOfInterior", "MinistryOfInterior")
                        .WithMany()
                        .HasForeignKey("MinistryOfInteriorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationTwo");

                    b.Navigation("MinistryOfInterior");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwoProsecutor", b =>
                {
                    b.HasOne("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwo", "ApplicationTwo")
                        .WithMany("ApplicationTwoProsecutors")
                        .HasForeignKey("ApplicationTwoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Nomenclatures.StateAdministration.Prosecutor", "Prosecutor")
                        .WithMany()
                        .HasForeignKey("ProsecutorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationTwo");

                    b.Navigation("Prosecutor");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.Common.Models.ApplicationLock", b =>
                {
                    b.HasOne("Zopoesht.Data.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zopoesht.Data.Emails.Email", b =>
                {
                    b.HasOne("Zopoesht.Data.Nomenclatures.Emails.EmailType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Zopoesht.Data.Emails.EmailAddressee", b =>
                {
                    b.HasOne("Zopoesht.Data.Emails.Email", "Email")
                        .WithMany("Addressees")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Email");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Operators.ActivityOffering", b =>
                {
                    b.HasOne("Zopoesht.Data.Nomenclatures.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.HasOne("Zopoesht.Data.Nomenclatures.Authority", "AuthorityBasin")
                        .WithMany()
                        .HasForeignKey("AuthorityBasinId");

                    b.HasOne("Zopoesht.Data.Nomenclatures.Authority", "AuthorityRiosv")
                        .WithMany()
                        .HasForeignKey("AuthorityRiosvId");

                    b.HasOne("Zopoesht.Data.Nomenclatures.Operators.Operator", "Operator")
                        .WithMany("ActivityOfferings")
                        .HasForeignKey("OperatorId");

                    b.HasOne("Zopoesht.Data.Nomenclatures.SubActivity", "SubActivity")
                        .WithMany()
                        .HasForeignKey("SubActivityId");

                    b.HasOne("Zopoesht.Data.Nomenclatures.Operators.Terrain", "Terrain")
                        .WithMany()
                        .HasForeignKey("TerrainId");

                    b.Navigation("Activity");

                    b.Navigation("AuthorityBasin");

                    b.Navigation("AuthorityRiosv");

                    b.Navigation("Operator");

                    b.Navigation("SubActivity");

                    b.Navigation("Terrain");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Operators.Operator", b =>
                {
                    b.HasOne("Zopoesht.Data.Nomenclatures.Operators.OperatorCorrespondence", "OperatorCorrespondence")
                        .WithMany()
                        .HasForeignKey("OperatorCorrespondenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Nomenclatures.Settlements.Settlement", "Settlement")
                        .WithMany()
                        .HasForeignKey("SettlementId");

                    b.Navigation("OperatorCorrespondence");

                    b.Navigation("Settlement");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Operators.OperatorCorrespondence", b =>
                {
                    b.HasOne("Zopoesht.Data.Nomenclatures.Settlements.Settlement", "Settlement")
                        .WithMany()
                        .HasForeignKey("SettlementId");

                    b.Navigation("Settlement");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Operators.Terrain", b =>
                {
                    b.HasOne("Zopoesht.Data.Nomenclatures.Settlements.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Zopoesht.Data.Nomenclatures.Settlements.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId");

                    b.HasOne("Zopoesht.Data.Nomenclatures.Operators.Operator", "Operator")
                        .WithMany("Terrains")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Nomenclatures.Settlements.Settlement", "Settlement")
                        .WithMany()
                        .HasForeignKey("SettlementId");

                    b.Navigation("District");

                    b.Navigation("Municipality");

                    b.Navigation("Operator");

                    b.Navigation("Settlement");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Period", b =>
                {
                    b.HasOne("Zopoesht.Data.Nomenclatures.Year", "EndYear")
                        .WithMany()
                        .HasForeignKey("EndYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Nomenclatures.Year", "StartYear")
                        .WithMany()
                        .HasForeignKey("StartYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EndYear");

                    b.Navigation("StartYear");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Settlements.Municipality", b =>
                {
                    b.HasOne("Zopoesht.Data.Nomenclatures.Settlements.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Settlements.Settlement", b =>
                {
                    b.HasOne("Zopoesht.Data.Nomenclatures.Settlements.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zopoesht.Data.Nomenclatures.Settlements.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.SubActivity", b =>
                {
                    b.HasOne("Zopoesht.Data.Nomenclatures.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Zopoesht.Data.Users.PasswordToken", b =>
                {
                    b.HasOne("Zopoesht.Data.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zopoesht.Data.Users.User", b =>
                {
                    b.HasOne("Zopoesht.Data.Nomenclatures.Authority", "Authority")
                        .WithMany()
                        .HasForeignKey("AuthorityId");

                    b.HasOne("Zopoesht.Data.Users.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Authority");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOne", b =>
                {
                    b.Navigation("ApplicationOneAuthorities");

                    b.Navigation("ApplicationOneBasic");

                    b.Navigation("ApplicationOneFiles");

                    b.Navigation("ApplicationTwos");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationOne.ApplicationOneBasic", b =>
                {
                    b.Navigation("ActivityOfferings");

                    b.Navigation("AffectedCountries");

                    b.Navigation("TerritorialRanges");
                });

            modelBuilder.Entity("Zopoesht.Data.Applications.ApplicationTwo.ApplicationTwo", b =>
                {
                    b.Navigation("ApplicationTwoActivityOfferings");

                    b.Navigation("ApplicationTwoAdministrativeCourts");

                    b.Navigation("ApplicationTwoAuthorities");

                    b.Navigation("ApplicationTwoFiles");

                    b.Navigation("ApplicationTwoMinistryOfInteriors");

                    b.Navigation("ApplicationTwoProsecutors");

                    b.Navigation("Codes");
                });

            modelBuilder.Entity("Zopoesht.Data.Emails.Email", b =>
                {
                    b.Navigation("Addressees");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Operators.Operator", b =>
                {
                    b.Navigation("ActivityOfferings");

                    b.Navigation("Terrains");
                });

            modelBuilder.Entity("Zopoesht.Data.Nomenclatures.Period", b =>
                {
                    b.Navigation("AnnualAdministrativeExpenses");
                });
#pragma warning restore 612, 618
        }
    }
}
